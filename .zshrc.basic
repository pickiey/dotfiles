# ==============================================================================
# Environment variable configuration
# ==============================================================================
# LANG
export LANG=ja_JP.UTF-8
case ${UID} in
0)
  LANG=C
  ;;
esac

# auto change directory
setopt auto_cd

# auto directory pushd that you can get dirs list by cd -[tab]
setopt auto_pushd

# command correct edition before each completion attempt
setopt correct

# compacked complete list display
setopt list_packed

# no remove postfix slash of command line
setopt noautoremoveslash

# no beep sound when complete list displayed
setopt nolistbeep

# 補完時に大文字小文字を区別しない
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# グロブ機能を拡張する
setopt extended_glob

# ファイルグロブで大文字小文字を区別しない
unsetopt caseglob

# 標準出力で上書きできなくする
# 上書きするときは>でなくて>!
# ファイルが存在しないとき>>でなくて>>!
setopt noclobber

# ターミナルのタイトルをuser@hostname:current-directoryに変更する
case "${TERM}" in
xterm|xterm-color|kterm|kterm-color)
  precmd() {
    echo -ne "\033]0;${USER}@${HOST%%.*}:${PWD}\007"
  }
  ;;
esac

# PATHをbinと名のつくもの全てに
#    パス(...): ...という条件にマッチするパスのみ残す。
#        (N-/): 存在しないディレクトリは登録しない。
#            N: NULL_GLOBオプションを設定。
#               globがマッチしなかったり存在しないパスを無視する。
#            -: シンボリックリンク先のパスを評価。
#            /: ディレクトリのみ残す。
typeset -U path
path=($HOME/bin(N-/) $path)
path=($HOME/*/bin(N-/) $path)

# Prediction configuration
#autoload predict-on





# ==============================================================================
# Keybind configuration
# ==============================================================================
# vim like keybind
bindkey -v

# historical backward/forward search with linehead string binded to ^P/^N
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^p" history-beginning-search-backward-end
bindkey "^n" history-beginning-search-forward-end
bindkey "\\ep" history-beginning-search-backward-end
bindkey "\\en" history-beginning-search-forward-end

# reverse menu completion binded to Shift-Tab
bindkey "\e[Z" reverse-menu-complete


# Command history configuration
HISTFILE=${HOME}/.zsh_history
HISTSIZE=50000
SAVEHIST=50000
setopt hist_ignore_dups     # ignore duplication command history list
setopt share_history        # share command history data


# Completion configuration
fpath=(${HOME}/.zsh/functions/Completion ${fpath})
autoload -U compinit
compinit -u





# ==============================================================================
# Alias configuration
# ==============================================================================
# expand aliases before completing
setopt complete_aliases     # aliased ls needs if file/dir completions work

alias where="command -v"
alias j="jobs -l"

case "${OSTYPE}" in
freebsd*|darwin*)
  alias ls="ls -G -w"
  ;;
linux*)
  alias ls="ls --color"
  ;;
esac

alias la="ls -a"
alias lsa="ls -a"
alias lf="ls -F"
alias ll="ls -lh"
alias lla="ls -alh"

alias du="du -h"
alias df="df -h"

alias su="su -l"

alias v=vim

alias cdd='cd ~/Downloads'
alias cdcd='cd ~/code'
alias cdt='cd ~/dotfiles'
alias aa=exit
alias ZZ=exit
alias ZQ=exit

alias tm='$HOME/dotfiles/bin/tmuxx.sh'
alias tma='tmux attach'
alias tmd='tmux detach'
alias tml='tmux list-window'
alias tmk='tmux kill-server'

# 右プロンプトでメモ
function memo() { RPROMPT="%{$fg[red]%}$1%{${reset_color}%}" }

# VimでManを見る
function man {
  local p
  local m
  if [ "$PAGER" != "" ];then
    p="$PAGER"
  fi
  if [ "$MANPAGER" != "" ];then
    m="$MNNPAGER"
  fi
  unset PAGER
  unset MANPAGER
  val=$(command man $* 2>&1)
  ret=$?
  if [ $ret -eq 0 ];then
    echo "$val"|col -bx|vim -R -c 'set ft=man' -
  else
    echo "$val"
  fi
  if [ "$p" != "" ];then
    export PAGER="$p"
  fi
  if [ "$m" != "" ];then
    export MANPAGER="$m"
  fi
  return $ret
}

# cdと同時にls -G
#function cdls() {
#  # cdがaliasでループするので\をつける
#  \cd $1;
#  ls;
#}
#alias cd=cdls





# ==============================================================================
# terminal configuration
# ==============================================================================
# enable color output
autoload -U colors; colors

# terminal color configuration

case "${TERM}" in
xterm|xterm-color)
  export LSCOLORS=exfxcxdxbxegedabagacad
  export LS_COLORS='di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
  zstyle ':completion:*' list-colors 'di=34' 'ln=35' 'so=32' 'ex=31' 'bd=46;34' 'cd=43;34'
  ;;
kterm-color)
  stty erase '^H'
  export LSCOLORS=exfxcxdxbxegedabagacad
  export LS_COLORS='di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
  zstyle ':completion:*' list-colors 'di=34' 'ln=35' 'so=32' 'ex=31' 'bd=46;34' 'cd=43;34'
  ;;
kterm)
  stty erase '^H'
  ;;
cons25)
  unset LANG
  export LSCOLORS=ExFxCxdxBxegedabagacad
  export LS_COLORS='di=01;34:ln=01;35:so=01;32:ex=01;31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
  zstyle ':completion:*' list-colors 'di=;34;1' 'ln=;35;1' 'so=;32;1' 'ex=31;1' 'bd=46;34' 'cd=43;34'
  ;;
jfbterm-color)
  export LSCOLORS=gxFxCxdxBxegedabagacad
  export LS_COLORS='di=01;36:ln=01;35:so=01;32:ex=01;31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
  zstyle ':completion:*' list-colors 'di=;36;1' 'ln=;35;1' 'so=;32;1' 'ex=31;1' 'bd=46;34' 'cd=43;34'
  ;;
esac

# Zshをもっとかわいくする{{{

  # もしかして機能
  setopt correct
  # PCRE 互換の正規表現を使う
  setopt re_match_pcre
  # プロンプトが表示されるたびにプロンプト文字列を評価、置換する
  setopt prompt_subst
  # VCSの情報を取得するzshの便利関数 vcs_infoを使う
  autoload -Uz vcs_info
  # 表示フォーマットの指定
  # %b ブランチ情報
  # %a アクション名(mergeなど)
  zstyle ':vcs_info:git:*' check-for-changes true
  zstyle ':vcs_info:git:*' stagedstr "+"    # 適当な文字列に変更する
  zstyle ':vcs_info:git:*' unstagedstr "-"
  zstyle ':vcs_info:*' formats '[%s %b%c%u]'
  zstyle ':vcs_info:*' actionformats '[%s %b %a%c%u]'
  precmd () {
    psvar=()
    LANG=en_US.UTF-8 vcs_info
    [[ -n "$vcs_info_msg_0_" ]] && psvar[1]="$vcs_info_msg_0_"
  }
  # プロンプト指定
  # https://wiki.archlinux.org/index.php/Zsh_(%E6%97%A5%E6%9C%AC%E8%AA%9E)#.E3.83.97.E3.83.AD.E3.83.B3.E3.83.97.E3.83.88.E5.A4.89.E6.95.B0
  # 1行目 改行
  # 2行目 ユーザ名@ホスト名 gitステータス カレントディレクトリ
  # 3行目 顔文字
  PROMPT=$'\n'"%{$fg[cyan]%}[%n@%m %D{%m/%d %T}] %1(v|%F{magenta}%1v%f|) %{$fg[yellow]%}%~%{${reset_color}%}"$'\n'"%(?.%{$fg[green]%}.%{$fg[blue]%})%(?!(*'-') <!(*;-;%) <)%{${reset_color}%} "
  # プロンプト指定(コマンドの続き)
  PROMPT2="[%n]> "
  # もしかして時のプロンプト指定
  SPROMPT="%{$suggest%}(*'~'%)? < もしかして %{$fg[red]%}%B%r%b%{${reset_color}%} かな? [そう!(y), 違う!(n),a,e]: "

  # 時刻更新
  TRAPALRM () { zle reset-prompt }
  TMOUT=1

# }}}

# tmux-powerline用の設定
PROMPT+='$([ -n "$TMUX" ] && tmux setenv TMUXPWD_$(tmux display -p "#D" | tr -d %) "$PWD")'

# 右プロンプト
# バージョン管理されているディレクトリにいれば表示，そうでなければ非表示
#RPROMPT="%1(v|%F{green}%1v%f|)"
