#-------------------------------------------------------------------------------
# Plugins
#-------------------------------------------------------------------------------

[[plugins]]
repo        = 'Shougo/dein.vim'

[[plugins]]
repo        = 'Shougo/vimproc.vim'
build       = 'make'



# ------------------------------------------------
# Colorscheme
# ------------------------------------------------

[[plugins]]
repo        = 'cocopon/iceberg.vim'
hook_add    = 'colorscheme iceberg'

[[plugins]]
repo        = 'aloussase/cyberpunk'
#hook_add    = 'set termguicolors | colorscheme cyberpunk'





# ------------------------------------------------
# Utility
# ------------------------------------------------

[[plugins]]
repo        = 'antoinemadec/FixCursorHold.nvim'
hook_add    = 'let g:cursorhold_updatetime = 100'

[[plugins]]
repo        = 'yuroyoro/smooth_scroll.vim'

[[plugins]] # w での移動を賢くする
repo        = 'vim-scripts/smartword'
hook_add    = '''
    map w   <Plug>(smartword-w)
    map b   <Plug>(smartword-b)
    map e   <Plug>(smartword-e)
    map ge  <Plug>(smartword-ge)
'''


[[plugins]] # 対となる括弧を追加/削除
repo        = 'jiangmiao/auto-pairs'

[[plugins]] # イコールの位置で揃えたりが可能な整形
repo        = 'junegunn/vim-easy-align'

[[plugins]] # インデントを可視化
repo        = 'nathanaelkane/vim-indent-guides'
hook_add    = '''
    let g:indent_guides_enable_on_vim_startup = 1
    let g:indent_guides_start_level           = 2
    let g:indent_guides_guide_size            = 1

    let g:indent_guides_auto_colors           = 0

    "autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#444433 ctermbg=black
    "autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#333344 ctermbg=darkgray

    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#222222 ctermbg=black
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#222222 ctermbg=black

'''

[[plugins]] # Gitの追加/削除/変更された行を行番号の左に表示
repo        = 'airblade/vim-gitgutter'
hook_add    = '''
    let g:gitgutter_sign_added    = '✚'
    let g:gitgutter_sign_modified = '➜'
    let g:gitgutter_sign_removed  = '✘'
'''

[[plugins]] # カーソル位置の単語をブラウザ開いて検索
repo        = 'tyru/open-browser.vim'
hook_add    = '''
    nmap <Leader>b <Plug>(openbrowser-smart-search)
    vmap <Leader>b <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo        = 'tpope/vim-obsession'



# ------------------------------------------------
# Filer
# ------------------------------------------------

[[plugins]]
repo        = 'lambdalisue/fern.vim'
hook_add    = '''
    let g:fern#default_hidden = 1
    let g:fern#drawer_width   = 30

    nnoremap <silent> <C-a> :Fern . -reveal=% -drawer -toggle<CR>
'''

[[plugins]] # ファイルツリーにgitの差分を表示
repo        = 'lambdalisue/fern-git-status.vim'

[[plugins]]
repo        = 'lambdalisue/nerdfont.vim'

[[plugins]] # アイコン表示
repo        = 'lambdalisue/fern-renderer-nerdfont.vim'
hook_add    = ''' let g:fern#renderer = 'nerdfont' '''

[[plugins]] # アイコンに色をつける
repo = 'lambdalisue/glyph-palette.vim'
hook_add = '''
    augroup my-glyph-palette
        autocmd! *
        autocmd FileType fern               call glyph_palette#apply()
        autocmd FileType nerdtree,startify  call glyph_palette#apply()
    augroup END
'''




# ------------------------------------------------
# Syntax
# ------------------------------------------------

[[plugins]]
repo        = 'itchyny/vim-autoft'
hook_add    = '''
    let g:autoft_config = [{
    \       'filetype'  : 'html',
    \       'pattern'   : '<\%(!DOCTYPE\|html\|head\|script\)\|^html:5\s*$'
    \   }, {
    \       'filetype'  : 'c',
    \       'pattern'   : '^\s*#\s*\%(include\|define\)\>'
    \   }, {
    \       'filetype'  : 'diff',
    \       'pattern'   : '^diff -'
    \   }, {
    \       'filetype'  : 'sh',
    \       'pattern'   : '^#!.*\%(\<sh\>\|\<bash\>\)\s*$'
    \   }
    \]
'''

[[plugins]]
repo        = 'luochen1990/rainbow'
hook_add    = '''
    let g:rainbow_active = 1

    let g:rainbow_conf = {
    \   'guifgs'        : ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
    \   'ctermfgs'      : ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
    \   'guis'          : [''],
    \   'cterms'        : [''],
    \   'operators'     : '_,_',
    \   'parentheses'   : ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
    \   'separately'    : { '*'         : {},
    \                       'markdown'  : {'parentheses_options'    : 'containedin=markdownCode contained'},
    \                       'lisp'      : {'guifgs'                 : ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3']},
    \                       'haskell'   : {'parentheses'            : ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/\v\{\ze[^-]/ end=/}/ fold']},
    \                       'vim'       : {'parentheses_options'    : 'containedin=vimFuncBody'},
    \                       'perl'      : {'syn_name_prefix'        : 'perlBlockFoldRainbow'},
    \                       'stylus'    : {'parentheses'            : ['start=/{/ end=/}/ fold contains=@colorableGroup']},
    \                       'css'       : 0
    \                     }
    \}
'''


[[plugins]]
repo        = 'rcmdnk/vim-markdown'
on_ft       = 'markdown'
hook_add    = 'let g:vim_markdown_folding_disabled = 1'


[[plugins]]
repo        = 'kana/vim-filetype-haskell'
on_ft       = 'haskell'

[[plugins]]
repo        = 'itchyny/vim-haskell-indent'
on_ft       = 'haskell'

[[plugins]]
repo        = 'digitaltoad/vim-pug'
on_ft       = 'pug'

[[plugins]]
repo        = 'iloginow/vim-stylus.git'
on_ft       = 'stylus'


[[plugins]] # HTMLで自動で閉じタグを入力
repo        = 'alvan/vim-closetag'
hook_add    = '''
    let g:closetag_filenames       = '*.html,*.xhtml,*.phtml,*.vue'
    let g:closetag_xhtml_filenames = '*.xhtml,*.jsx'
'''




# ------------------------------------------------
# Completion
# ------------------------------------------------

[[plugins]]
repo        = 'neoclide/coc.nvim'



# ------------------------------------------------
# Quickrun.vim
# ------------------------------------------------

[[plugins]]
repo        = 'thinca/vim-quickrun'
hook_add    = '''
    let g:quickrun_config = {
    \   '_' : {
    \       'runner'                          : 'vimproc',
    \       'runner/vimproc/updatetime'       : 60,
    \       'outputter/buffer/split'          : ':botright 8sp',
    \       'outputter/buffer/close_on_empty' : 1
    \   }
    \}

    set splitbelow
    set splitright

    let g:quickrun_config['html'] = {
    \   'command'   : 'open',
    \   'cmdopt'    : '-g'
    \}
    let g:quickrun_config['markdown'] = {
    \   'outputter' : 'browser'
    \}
'''

[[plugins]]
repo        = 'mattn/emmet-vim'
hook_add    = '''
    let g:user_emmet_settings = {
    \   'variables' : {
    \       'lang'    : "ja",
    \       'charset' : "utf-8"
    \   },
    \   'html' : {
    \       'snippets' : {
    \           'html:5': "<!DOCTYPE html>\n"
    \           ."<html>\n"
    \           ."<head>\n"
    \           ."\t<meta charset=\"${charset}\">\n"
    \           ."\t<meta name=\"robots\" content=\"noindex, nofollow\">\n"
    \           ."\n"
    \           ."\t<title></title>\n"
    \           ."\t<meta name=\"description\" content=\"\">\n"
    \           ."\t<link rel=\"icon\" type=\"image/\" href=\"\">\n"
    \           ."\n"
    \           ."\t<meta property=\"og:url\"         content=\"\">\n"
    \           ."\t<meta property=\"og:title\"       content=\"\">\n"
    \           ."\t<meta property=\"og:description\" content=\"\">\n"
    \           ."\t<meta property=\"og:image\"       content=\"\">\n"
    \           ."\n"
    \           ."\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n"
    \           ."\t<meta name=\"format-detection\" content=\"telephone=no\">\n"
    \           ."\n"
    \           ."\t<meta name=\"viewport\" content=\"width=device-width\">\n"
    \           ."\t<link rel=\"stylesheet\" href=\"https://unpkg.com/ress/dist/ress.min.css\">\n"
    \           ."\n"
    \           ."\t<link rel=\"stylesheet\" href=\"\">\n"
    \           ."</head>\n"
    \           ."\n"
    \           ."<body>\n"
    \           ."\t${child}${cursor}\n"
    \           ."</body>\n"
    \           ."</html>"
    \       }
    \   }
    \}
'''


[[plugins]]
repo        = 'instant-markdown/vim-instant-markdown'
on_ft       = 'markdown'
#hook_add    = 'let g:instant_markdown_autostart = 0'



# ------------------------------------------------
# Statusline
# ------------------------------------------------

[[plugins]]
repo        = 'itchyny/lightline.vim'
hook_add    = '''
    set laststatus=2
    set noshowmode

    let g:lightline = {
    \   'colorscheme' : 'solarized',
    \   'mode_map'    : {'c': 'NORMAL'},
    \   'active': {
    \       'left': [
    \           ['mode', 'paste'],
    \           ['fugitive', 'gitgutter', 'filename']
    \       ],
    \       'right': [
    \           ['lineinfo', 'syntastic'],
    \           ['percent'],
    \           ['charcode', 'fileformat', 'fileencoding', 'filetype']
    \       ]
    \   },
    \   'component_function': {
    \       'modified'      : 'MyModified',
    \       'readonly'      : 'MyReadonly',
    \       'fugitive'      : 'MyFugitive',
    \       'filename'      : 'MyFilename',
    \       'fileformat'    : 'MyFileformat',
    \       'filetype'      : 'MyFiletype',
    \       'fileencoding'  : 'MyFileencoding',
    \       'mode'          : 'MyMode',
    \       'syntastic'     : 'SyntasticStatuslineFlag',
    \       'charcode'      : 'MyCharCode',
    \       'gitgutter'     : 'MyGitGutter'
    \   },
    \}

    " セパレータはフォントにパッチ当て必要
    "\   'separator': {'left': '⮀', 'right': '⮂'},
    "\   'subseparator': {'left': '⮁', 'right': '⮃'}
    "\   'separator': { 'left': "\ue0bc", 'right': "\ue0be" },
    "\   'subseparator': { 'left': "\ue0bd", 'right': "\ue0bf" }

    function! MyModified()
        return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction

    function! MyReadonly()
        return &ft !~? 'help\|vimfiler\|gundo' && &ro ? '⭤' : ''
    endfunction

    function! MyFilename()
        return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
            \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
            \  &ft == 'unite' ? unite#get_status_string() :
            \  &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
            \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
            \ ('' != MyModified() ? ' ' . MyModified() : '')
    endfunction

    function! MyFugitive()
        try
            if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
                let _ = fugitive#head()
                return strlen(_) ? '⭠ '._ : ''
            endif
        catch
        endtry
        return ''
    endfunction

    function! MyFileformat()
        return winwidth('.') > 70 ? &fileformat : ''
    endfunction

    function! MyFiletype()
        return winwidth('.') > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
    endfunction

    function! MyFileencoding()
        return winwidth('.') > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
    endfunction

    function! MyMode()
        return winwidth('.') > 60 ? lightline#mode() : ''
    endfunction

    function! MyGitGutter()
        if ! exists('*GitGutterGetHunkSummary')
            \ || ! get(g:, 'gitgutter_enabled', 0)
            \ || winwidth('.') <= 90
            return ''
        endif
        let symbols = [
            \ g:gitgutter_sign_added . ' ',
            \ g:gitgutter_sign_modified . ' ',
            \ g:gitgutter_sign_removed . ' '
            \ ]
        let hunks = GitGutterGetHunkSummary()
        let ret = []
        for i in [0, 1, 2]
            if hunks[i] > 0
                call add(ret, symbols[i] . hunks[i])
            endif
        endfor
        return join(ret, ' ')
    endfunction

    " https://github.com/Lokaltog/vim-powerline/blob/develop/autoload/Powerline/Functions.vim
    function! MyCharCode()
        if winwidth('.') <= 70
            return ''
        endif

        " Get the output of :ascii
        redir => ascii
        silent! ascii
        redir END

        if match(ascii, 'NUL') != -1
            return 'NUL'
        endif

        " Zero pad hex values
        let nrformat = '0x%02x'

        let encoding = (&fenc == '' ? &enc : &fenc)

        if encoding == 'utf-8'
            " Zero pad with 4 zeroes in unicode files
            let nrformat = '0x%04x'
        endif

        " Get the character and the numeric value from the return value of :ascii
        " This matches the two first pieces of the return value, e.g.
        " "<F>  70" => char: 'F', nr: '70'
        let [str, char, nr; rest] = matchlist(ascii, '\v\<(.{-1,})\>\s*([0-9]+)')

        " Format the numeric value
        let nr = printf(nrformat, nr)

        return "'". char ."' ". nr
    endfunction
'''
